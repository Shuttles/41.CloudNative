# 1.安装kubeadm和Docker



# 2.部署K8s的master节点



# 3.部署网络插件



# 4.部署K8s的worker节点



# 5.通过 Taint/Toleration 调整 Master 执行 Pod 的策略

1. 我在前面提到过，默认情况下 Master 节点是不允许运行用户 Pod 的。而 Kubernetes 做到这一点，依靠的是 Kubernetes 的 Taint/Toleration 机制。



# 6.部署 Dashboard 可视化插件



# 7.部署容器存储插件

1. 接下来，让我们完成这个 Kubernetes 集群的最后一块拼图：**容器持久化存储**。

2. 我在前面介绍容器原理时已经提到过，**很多时候我们需要用数据卷（Volume）把外面宿主机上的目录或者文件挂载进容器的 Mount Namespace 中**，从而达到**容器和宿主机共享这些目录或者文件的目的**。<u>容器里的应用，也就可以在这些数据卷中新建和写入文件</u>。

   可是，如果你在某一台机器上启动的一个容器，显然**无法看到**其他机器上的容器在它们的数据卷里写入的文件。**这是容器最典型的特征之一：无状态。**

3. 而容器的持久化存储，就是**用来<u>保存容器存储状态</u>的重要手段**：

   存储插件会<u>在容器里挂载一个基于网络或者其他机制的远程数据卷</u>，使得在容器里创建的文件，<u>实际上是保存在远程存储服务器上</u>，或者以分布式的方式保存在多个节点上，而与当前宿主机没有任何绑定关系。

   这样，无论你在其他哪个宿主机上启动新的容器，都可以请求挂载指定的持久化存储卷，从而访问到数据卷里保存的内容。**这就是“持久化”的含义。**

4. 由于 Kubernetes 本身的松耦合设计，绝大多数存储项目，比如 Ceph、GlusterFS、NFS 等，都可以为 Kubernetes 提供持久化存储能力。





> 备注：其实，在很多时候，大家说的所谓“云原生”，就是“Kubernetes 原生”的意思。而像 Rook、Istio 这样的项目，正是贯彻这个思路的典范。在我们后面讲解了声明式 API 之后，相信你对这些项目的设计思想会有更深刻的体会。



# 总结

1. 在本篇文章中，我们完全从 0 开始，在 Bare-metal 环境下使用 kubeadm 工具部署了一个完整的 Kubernetes 集群：这个集群有一个 Master 节点和多个 Worker 节点；使用 Weave 作为容器网络插件；使用 Rook 作为容器持久化存储插件；使用 Dashboard 插件提供了可视化的 Web 界面。
2. 另外，这个集群的部署过程并不像传说中那么繁琐，这主要得益于：
   1. **kubeadm 项目大大简化了部署 Kubernetes 的准备工作**，尤其是配置文件、证书、二进制文件的准备和制作，以及集群版本管理等操作，都被 kubeadm 接管了。
   2. **Kubernetes 本身“一切皆容器”的设计思想**，加上良好的可扩展机制，使得插件的部署非常简便。
3. 上述思想，也是开发和使用 Kubernetes 的**重要指导思想**，即：基于 Kubernetes 开展工作时，你一定要优先考虑这两个问题：
   1. **我的工作是不是可以容器化？**
   2. **我的工作是不是可以借助 Kubernetes API 和可扩展机制来完成？**
4. 而一旦这项工作能够基于 Kubernetes 实现容器化，就很有可能像上面的部署过程一样，大幅简化原本复杂的运维工作。对于时间宝贵的技术人员来说，这个变化的重要性是不言而喻的。